plugins {
	id 'biz.aQute.bnd.builder'
	id 'checkstyle'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id 'java'
	id 'java-library'
	id 'net.ltgt.errorprone'
	id 'com.github.ben-manes.versions'

	id 'jacoco-report-aggregation'
	id 'test-report-aggregation'

	id 'eu.geekplace.javapinning.common-conventions'
	id 'eu.geekplace.javapinning.javadoc-conventions'
	id 'eu.geekplace.javapinning.publish-conventions'
}

ext {
	gitCommit = getGitCommit()
	documentationDir = new File(projectDir, 'documentation')
	releasedocsDir = new File(buildDir, 'releasedocs')
	rootConfigDir = new File(rootDir, 'config')
	isReleaseVersion = !isSnapshot
	junitVersion = '5.11.3'
}

java {
	sourceCompatibility = javaVersion
	targetCompatibility = sourceCompatibility
}

ext.sharedManifest = manifest {
	attributes('Implementation-Version': version,
			   'Implementation-GitRevision': ext.gitCommit,
			   'Built-JDK': System.getProperty('java.version'),
			   'Built-Gradle': gradle.gradleVersion,
			   'Built-By': System.getProperty('user.name')
			  )
}

eclipse {
	classpath {
		downloadJavadoc = true
	}
}

// Make all project's 'test' target depend on javadoc, so that
// javadoc is also linted.
test.dependsOn javadoc

tasks.withType(JavaCompile) {
	// Some systems may not have set their platform default
	// converter to 'utf8', but we use unicode in our source
	// files. Therefore ensure that javac uses unicode
	options.encoding = "utf8"
	options.compilerArgs = [
		'-Xlint:all',
		// Set '-options' because a non-java7 javac will emit a
		// warning if source/target is set to 1.7 and
		// bootclasspath is *not* set.
		'-Xlint:-options',
		'-Werror',
	]
	options.release = Integer.valueOf(javaMajor)
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}
}

dependencies {
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

	// https://stackoverflow.com/a/77274251/194894
	testImplementation "org.junit.platform:junit-platform-launcher:1.11.3"

	errorprone 'com.google.errorprone:error_prone_core:2.35.1'
}

test {
	useJUnitPlatform()

	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

	// Enable full stacktraces of failed tests. Especially handy
	// for environments like Travis.
	testLogging {
		events "failed"
		exceptionFormat "full"
	}
}

jar {
	bundle {
		bnd(
				'-removeheaders': 'Tool, Bnd-*',
				'-exportcontents': 'eu.geekplace.javapinning.*',
		)
	}
}
checkstyle {
	toolVersion = '10.18.2'
}
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}
task testsJar(type: Jar) {
	archiveClassifier = 'tests'
	from sourceSets.test.output
}
configurations {
    testRuntime
}
artifacts {
    // Add a 'testRuntime' configuration including the tests so that
    // it can be consumed by other projects (smack-omemo-signal for
    // example).  See http://stackoverflow.com/a/21946676/194894
    testRuntime testsJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			artifact testsJar
		}
	}
}

tasks.withType(JavaCompile) {
	options.errorprone {
		disableWarningsInGeneratedCode = true
		excludedPaths = ".*/jmh_generated/.*"
		error(
			"UnusedVariable",
			"UnusedMethod",
			"MethodCanBeStatic",
		)
		errorproneArgs = [
			// Disable MissingCasesInEnumSwitch error prone check
			// because this check is already done by javac as incomplete-switch.
			'-Xep:MissingCasesInEnumSwitch:OFF',
			'-Xep:StringSplitter:OFF',
			'-Xep:JavaTimeDefaultTimeZone:OFF',
			'-Xep:InlineMeSuggester:OFF',
		]
	}
}

// TODO: Note sure what this does (did). Was there prior the build-logic conversion.
// dependencies {
// 	androidProjects.each { project ->
// 		api project
// 	}
// }

def getGitCommit() {
	def projectDirFile = new File("$projectDir")
	def dotGit = new File(projectDirFile, ".git")
	if (!dotGit.isDirectory()) return 'non-git build'

	def cmd = 'git describe --always --tags --dirty=+'
	def proc = cmd.execute(null, projectDirFile)
	def gitCommit = proc.text.trim()
	assert !gitCommit.isEmpty()
	gitCommit
}
